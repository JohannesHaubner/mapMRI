starting to run
 This problem is unconstrained.
 This problem is unconstrained.
 This problem is unconstrained.
 This problem is unconstrained.
Traceback (most recent call last):
  File "/home/bastian/Oscar-Image-Registration-via-Transport-Equation/Optimize3d.py", line 247, in <module>
Traceback (most recent call last):
  File "/home/bastian/Oscar-Image-Registration-via-Transport-Equation/Optimize3d.py", line 247, in <module>
Traceback (most recent call last):
  File "/home/bastian/Oscar-Image-Registration-via-Transport-Equation/Optimize3d.py", line 247, in <module>
Traceback (most recent call last):
  File "/home/bastian/Oscar-Image-Registration-via-Transport-Equation/Optimize3d.py", line 247, in <module>
    find_velocity(Img, Img_goal, vCG, M_lumped_inv, hyperparameters, files, starting_guess=controlfun)
  File "/home/bastian/Oscar-Image-Registration-via-Transport-Equation/mri_utils/find_velocity.py", line 184, in find_velocity
    find_velocity(Img, Img_goal, vCG, M_lumped_inv, hyperparameters, files, starting_guess=controlfun)
  File "/home/bastian/Oscar-Image-Registration-via-Transport-Equation/mri_utils/find_velocity.py", line 184, in find_velocity
    find_velocity(Img, Img_goal, vCG, M_lumped_inv, hyperparameters, files, starting_guess=controlfun)
    find_velocity(Img, Img_goal, vCG, M_lumped_inv, hyperparameters, files, starting_guess=controlfun)
  File "/home/bastian/Oscar-Image-Registration-via-Transport-Equation/mri_utils/find_velocity.py", line 184, in find_velocity
  File "/home/bastian/Oscar-Image-Registration-via-Transport-Equation/mri_utils/find_velocity.py", line 184, in find_velocity
    minimize(Jhat,  method = 'L-BFGS-B', options = {"iprint": 0, "disp": None, "maxiter": hyperparameters["lbfgs_max_iterations"]}, tol=1e-08, callback = cb)
  File "/home/bastian/.conda/envs/mri_inverse/lib/python3.9/site-packages/pyadjoint/tape.py", line 46, in wrapper
    minimize(Jhat,  method = 'L-BFGS-B', options = {"iprint": 0, "disp": None, "maxiter": hyperparameters["lbfgs_max_iterations"]}, tol=1e-08, callback = cb)
    minimize(Jhat,  method = 'L-BFGS-B', options = {"iprint": 0, "disp": None, "maxiter": hyperparameters["lbfgs_max_iterations"]}, tol=1e-08, callback = cb)
  File "/home/bastian/.conda/envs/mri_inverse/lib/python3.9/site-packages/pyadjoint/tape.py", line 46, in wrapper
  File "/home/bastian/.conda/envs/mri_inverse/lib/python3.9/site-packages/pyadjoint/tape.py", line 46, in wrapper
    minimize(Jhat,  method = 'L-BFGS-B', options = {"iprint": 0, "disp": None, "maxiter": hyperparameters["lbfgs_max_iterations"]}, tol=1e-08, callback = cb)
  File "/home/bastian/.conda/envs/mri_inverse/lib/python3.9/site-packages/pyadjoint/tape.py", line 46, in wrapper
    return function(*args, **kwargs)
  File "/home/bastian/.conda/envs/mri_inverse/lib/python3.9/site-packages/pyadjoint/optimization/optimization.py", line 252, in minimize
    return function(*args, **kwargs)
  File "/home/bastian/.conda/envs/mri_inverse/lib/python3.9/site-packages/pyadjoint/optimization/optimization.py", line 252, in minimize
    return function(*args, **kwargs)
  File "/home/bastian/.conda/envs/mri_inverse/lib/python3.9/site-packages/pyadjoint/optimization/optimization.py", line 252, in minimize
    return function(*args, **kwargs)
  File "/home/bastian/.conda/envs/mri_inverse/lib/python3.9/site-packages/pyadjoint/optimization/optimization.py", line 252, in minimize
    opt = algorithm(rf_np, **kwargs)
  File "/home/bastian/.conda/envs/mri_inverse/lib/python3.9/site-packages/pyadjoint/optimization/optimization.py", line 135, in minimize_scipy_generic
    opt = algorithm(rf_np, **kwargs)
  File "/home/bastian/.conda/envs/mri_inverse/lib/python3.9/site-packages/pyadjoint/optimization/optimization.py", line 135, in minimize_scipy_generic
    opt = algorithm(rf_np, **kwargs)
  File "/home/bastian/.conda/envs/mri_inverse/lib/python3.9/site-packages/pyadjoint/optimization/optimization.py", line 135, in minimize_scipy_generic
    opt = algorithm(rf_np, **kwargs)
  File "/home/bastian/.conda/envs/mri_inverse/lib/python3.9/site-packages/pyadjoint/optimization/optimization.py", line 135, in minimize_scipy_generic
    res = scipy_minimize(J, m_global, method=method, **kwargs)
  File "/home/bastian/.conda/envs/mri_inverse/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 623, in minimize
    res = scipy_minimize(J, m_global, method=method, **kwargs)
  File "/home/bastian/.conda/envs/mri_inverse/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 623, in minimize
    res = scipy_minimize(J, m_global, method=method, **kwargs)
  File "/home/bastian/.conda/envs/mri_inverse/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 623, in minimize
    res = scipy_minimize(J, m_global, method=method, **kwargs)
  File "/home/bastian/.conda/envs/mri_inverse/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 623, in minimize
    return _minimize_lbfgsb(fun, x0, args, jac, bounds,
  File "/home/bastian/.conda/envs/mri_inverse/lib/python3.9/site-packages/scipy/optimize/lbfgsb.py", line 365, in _minimize_lbfgsb
    return _minimize_lbfgsb(fun, x0, args, jac, bounds,
  File "/home/bastian/.conda/envs/mri_inverse/lib/python3.9/site-packages/scipy/optimize/lbfgsb.py", line 365, in _minimize_lbfgsb
    return _minimize_lbfgsb(fun, x0, args, jac, bounds,
  File "/home/bastian/.conda/envs/mri_inverse/lib/python3.9/site-packages/scipy/optimize/lbfgsb.py", line 365, in _minimize_lbfgsb
    return _minimize_lbfgsb(fun, x0, args, jac, bounds,
  File "/home/bastian/.conda/envs/mri_inverse/lib/python3.9/site-packages/scipy/optimize/lbfgsb.py", line 365, in _minimize_lbfgsb
    callback(np.copy(x))
  File "/home/bastian/Oscar-Image-Registration-via-Transport-Equation/mri_utils/find_velocity.py", line 149, in cb
    callback(np.copy(x))
  File "/home/bastian/Oscar-Image-Registration-via-Transport-Equation/mri_utils/find_velocity.py", line 149, in cb
    callback(np.copy(x))
  File "/home/bastian/Oscar-Image-Registration-via-Transport-Equation/mri_utils/find_velocity.py", line 149, in cb
    callback(np.copy(x))
  File "/home/bastian/Oscar-Image-Registration-via-Transport-Equation/mri_utils/find_velocity.py", line 149, in cb
    fCont.write(mesh, '/mesh')
TypeError: write(): incompatible function arguments. The following argument types are supported:
    1. (self: dolfin.cpp.io.XDMFFile, u: dolfin.cpp.function.Function, encoding: dolfin.cpp.io.XDMFFile.Encoding = <Encoding.HDF5: 0>) -> None
    2. (self: dolfin.cpp.io.XDMFFile, u: dolfin.cpp.function.Function, t: float, encoding: dolfin.cpp.io.XDMFFile.Encoding = <Encoding.HDF5: 0>) -> None
    3. (self: dolfin.cpp.io.XDMFFile, mesh: dolfin.cpp.mesh.Mesh, encoding: dolfin.cpp.io.XDMFFile.Encoding = <Encoding.HDF5: 0>) -> None
    4. (self: dolfin.cpp.io.XDMFFile, mvc: dolfin.cpp.mesh.MeshFunctionBool, encoding: dolfin.cpp.io.XDMFFile.Encoding = <Encoding.HDF5: 0>) -> None
    5. (self: dolfin.cpp.io.XDMFFile, mvc: dolfin.cpp.mesh.MeshFunctionSizet, encoding: dolfin.cpp.io.XDMFFile.Encoding = <Encoding.HDF5: 0>) -> None
    6. (self: dolfin.cpp.io.XDMFFile, mvc: dolfin.cpp.mesh.MeshFunctionInt, encoding: dolfin.cpp.io.XDMFFile.Encoding = <Encoding.HDF5: 0>) -> None
    7. (self: dolfin.cpp.io.XDMFFile, mvc: dolfin.cpp.mesh.MeshFunctionDouble, encoding: dolfin.cpp.io.XDMFFile.Encoding = <Encoding.HDF5: 0>) -> None
    8. (self: dolfin.cpp.io.XDMFFile, mvc: dolfin.cpp.mesh.MeshValueCollection_bool, encoding: dolfin.cpp.io.XDMFFile.Encoding = <Encoding.HDF5: 0>) -> None
    9. (self: dolfin.cpp.io.XDMFFile, mvc: dolfin.cpp.mesh.MeshValueCollection_sizet, encoding: dolfin.cpp.io.XDMFFile.Encoding = <Encoding.HDF5: 0>) -> None
    10. (self: dolfin.cpp.io.XDMFFile, mvc: dolfin.cpp.mesh.MeshValueCollection_int, encoding: dolfin.cpp.io.XDMFFile.Encoding = <Encoding.HDF5: 0>) -> None
    11. (self: dolfin.cpp.io.XDMFFile, mvc: dolfin.cpp.mesh.MeshValueCollection_double, encoding: dolfin.cpp.io.XDMFFile.Encoding = <Encoding.HDF5: 0>) -> None
    12. (self: dolfin.cpp.io.XDMFFile, points: list, encoding: dolfin.cpp.io.XDMFFile.Encoding = <Encoding.HDF5: 0>) -> None
    13. (self: dolfin.cpp.io.XDMFFile, points: list, values: List[float], encoding: dolfin.cpp.io.XDMFFile.Encoding = <Encoding.HDF5: 0>) -> None
    14. (self: dolfin.cpp.io.XDMFFile, u: object, encoding: dolfin.cpp.io.XDMFFile.Encoding = <Encoding.HDF5: 0>) -> None
    15. (self: dolfin.cpp.io.XDMFFile, u: object, t: float, encoding: dolfin.cpp.io.XDMFFile.Encoding = <Encoding.HDF5: 0>) -> None

Invoked with: <dolfin.cpp.io.XDMFFile object at 0x155535d95ef0>, <module 'fenics_adjoint.types.mesh' from '/home/bastian/.conda/envs/mri_inverse/lib/python3.9/site-packages/fenics_adjoint/types/mesh.py'>, '/mesh'
    fCont.write(mesh, '/mesh')
TypeError: write(): incompatible function arguments. The following argument types are supported:
    1. (self: dolfin.cpp.io.XDMFFile, u: dolfin.cpp.function.Function, encoding: dolfin.cpp.io.XDMFFile.Encoding = <Encoding.HDF5: 0>) -> None
    2. (self: dolfin.cpp.io.XDMFFile, u: dolfin.cpp.function.Function, t: float, encoding: dolfin.cpp.io.XDMFFile.Encoding = <Encoding.HDF5: 0>) -> None
    3. (self: dolfin.cpp.io.XDMFFile, mesh: dolfin.cpp.mesh.Mesh, encoding: dolfin.cpp.io.XDMFFile.Encoding = <Encoding.HDF5: 0>) -> None
    4. (self: dolfin.cpp.io.XDMFFile, mvc: dolfin.cpp.mesh.MeshFunctionBool, encoding: dolfin.cpp.io.XDMFFile.Encoding = <Encoding.HDF5: 0>) -> None
    5. (self: dolfin.cpp.io.XDMFFile, mvc: dolfin.cpp.mesh.MeshFunctionSizet, encoding: dolfin.cpp.io.XDMFFile.Encoding = <Encoding.HDF5: 0>) -> None
    6. (self: dolfin.cpp.io.XDMFFile, mvc: dolfin.cpp.mesh.MeshFunctionInt, encoding: dolfin.cpp.io.XDMFFile.Encoding = <Encoding.HDF5: 0>) -> None
    7. (self: dolfin.cpp.io.XDMFFile, mvc: dolfin.cpp.mesh.MeshFunctionDouble, encoding: dolfin.cpp.io.XDMFFile.Encoding = <Encoding.HDF5: 0>) -> None
    8. (self: dolfin.cpp.io.XDMFFile, mvc: dolfin.cpp.mesh.MeshValueCollection_bool, encoding: dolfin.cpp.io.XDMFFile.Encoding = <Encoding.HDF5: 0>) -> None
    9. (self: dolfin.cpp.io.XDMFFile, mvc: dolfin.cpp.mesh.MeshValueCollection_sizet, encoding: dolfin.cpp.io.XDMFFile.Encoding = <Encoding.HDF5: 0>) -> None
    10. (self: dolfin.cpp.io.XDMFFile, mvc: dolfin.cpp.mesh.MeshValueCollection_int, encoding: dolfin.cpp.io.XDMFFile.Encoding = <Encoding.HDF5: 0>) -> None
    11. (self: dolfin.cpp.io.XDMFFile, mvc: dolfin.cpp.mesh.MeshValueCollection_double, encoding: dolfin.cpp.io.XDMFFile.Encoding = <Encoding.HDF5: 0>) -> None
    12. (self: dolfin.cpp.io.XDMFFile, points: list, encoding: dolfin.cpp.io.XDMFFile.Encoding = <Encoding.HDF5: 0>) -> None
    13. (self: dolfin.cpp.io.XDMFFile, points: list, values: List[float], encoding: dolfin.cpp.io.XDMFFile.Encoding = <Encoding.HDF5: 0>) -> None
    14. (self: dolfin.cpp.io.XDMFFile, u: object, encoding: dolfin.cpp.io.XDMFFile.Encoding = <Encoding.HDF5: 0>) -> None
    15. (self: dolfin.cpp.io.XDMFFile, u: object, t: float, encoding: dolfin.cpp.io.XDMFFile.Encoding = <Encoding.HDF5: 0>) -> None

Invoked with: <dolfin.cpp.io.XDMFFile object at 0x155535e68830>, <module 'fenics_adjoint.types.mesh' from '/home/bastian/.conda/envs/mri_inverse/lib/python3.9/site-packages/fenics_adjoint/types/mesh.py'>, '/mesh'
    fCont.write(mesh, '/mesh')
TypeError: write(): incompatible function arguments. The following argument types are supported:
    1. (self: dolfin.cpp.io.XDMFFile, u: dolfin.cpp.function.Function, encoding: dolfin.cpp.io.XDMFFile.Encoding = <Encoding.HDF5: 0>) -> None
    2. (self: dolfin.cpp.io.XDMFFile, u: dolfin.cpp.function.Function, t: float, encoding: dolfin.cpp.io.XDMFFile.Encoding = <Encoding.HDF5: 0>) -> None
    3. (self: dolfin.cpp.io.XDMFFile, mesh: dolfin.cpp.mesh.Mesh, encoding: dolfin.cpp.io.XDMFFile.Encoding = <Encoding.HDF5: 0>) -> None
    4. (self: dolfin.cpp.io.XDMFFile, mvc: dolfin.cpp.mesh.MeshFunctionBool, encoding: dolfin.cpp.io.XDMFFile.Encoding = <Encoding.HDF5: 0>) -> None
    5. (self: dolfin.cpp.io.XDMFFile, mvc: dolfin.cpp.mesh.MeshFunctionSizet, encoding: dolfin.cpp.io.XDMFFile.Encoding = <Encoding.HDF5: 0>) -> None
    6. (self: dolfin.cpp.io.XDMFFile, mvc: dolfin.cpp.mesh.MeshFunctionInt, encoding: dolfin.cpp.io.XDMFFile.Encoding = <Encoding.HDF5: 0>) -> None
    7. (self: dolfin.cpp.io.XDMFFile, mvc: dolfin.cpp.mesh.MeshFunctionDouble, encoding: dolfin.cpp.io.XDMFFile.Encoding = <Encoding.HDF5: 0>) -> None
    8. (self: dolfin.cpp.io.XDMFFile, mvc: dolfin.cpp.mesh.MeshValueCollection_bool, encoding: dolfin.cpp.io.XDMFFile.Encoding = <Encoding.HDF5: 0>) -> None
    9. (self: dolfin.cpp.io.XDMFFile, mvc: dolfin.cpp.mesh.MeshValueCollection_sizet, encoding: dolfin.cpp.io.XDMFFile.Encoding = <Encoding.HDF5: 0>) -> None
    10. (self: dolfin.cpp.io.XDMFFile, mvc: dolfin.cpp.mesh.MeshValueCollection_int, encoding: dolfin.cpp.io.XDMFFile.Encoding = <Encoding.HDF5: 0>) -> None
    11. (self: dolfin.cpp.io.XDMFFile, mvc: dolfin.cpp.mesh.MeshValueCollection_double, encoding: dolfin.cpp.io.XDMFFile.Encoding = <Encoding.HDF5: 0>) -> None
    12. (self: dolfin.cpp.io.XDMFFile, points: list, encoding: dolfin.cpp.io.XDMFFile.Encoding = <Encoding.HDF5: 0>) -> None
    13. (self: dolfin.cpp.io.XDMFFile, points: list, values: List[float], encoding: dolfin.cpp.io.XDMFFile.Encoding = <Encoding.HDF5: 0>) -> None
    14. (self: dolfin.cpp.io.XDMFFile, u: object, encoding: dolfin.cpp.io.XDMFFile.Encoding = <Encoding.HDF5: 0>) -> None
    15. (self: dolfin.cpp.io.XDMFFile, u: object, t: float, encoding: dolfin.cpp.io.XDMFFile.Encoding = <Encoding.HDF5: 0>) -> None

Invoked with: <dolfin.cpp.io.XDMFFile object at 0x155535d34970>, <module 'fenics_adjoint.types.mesh' from '/home/bastian/.conda/envs/mri_inverse/lib/python3.9/site-packages/fenics_adjoint/types/mesh.py'>, '/mesh'
    fCont.write(mesh, '/mesh')
TypeError: write(): incompatible function arguments. The following argument types are supported:
    1. (self: dolfin.cpp.io.XDMFFile, u: dolfin.cpp.function.Function, encoding: dolfin.cpp.io.XDMFFile.Encoding = <Encoding.HDF5: 0>) -> None
    2. (self: dolfin.cpp.io.XDMFFile, u: dolfin.cpp.function.Function, t: float, encoding: dolfin.cpp.io.XDMFFile.Encoding = <Encoding.HDF5: 0>) -> None
    3. (self: dolfin.cpp.io.XDMFFile, mesh: dolfin.cpp.mesh.Mesh, encoding: dolfin.cpp.io.XDMFFile.Encoding = <Encoding.HDF5: 0>) -> None
    4. (self: dolfin.cpp.io.XDMFFile, mvc: dolfin.cpp.mesh.MeshFunctionBool, encoding: dolfin.cpp.io.XDMFFile.Encoding = <Encoding.HDF5: 0>) -> None
    5. (self: dolfin.cpp.io.XDMFFile, mvc: dolfin.cpp.mesh.MeshFunctionSizet, encoding: dolfin.cpp.io.XDMFFile.Encoding = <Encoding.HDF5: 0>) -> None
    6. (self: dolfin.cpp.io.XDMFFile, mvc: dolfin.cpp.mesh.MeshFunctionInt, encoding: dolfin.cpp.io.XDMFFile.Encoding = <Encoding.HDF5: 0>) -> None
    7. (self: dolfin.cpp.io.XDMFFile, mvc: dolfin.cpp.mesh.MeshFunctionDouble, encoding: dolfin.cpp.io.XDMFFile.Encoding = <Encoding.HDF5: 0>) -> None
    8. (self: dolfin.cpp.io.XDMFFile, mvc: dolfin.cpp.mesh.MeshValueCollection_bool, encoding: dolfin.cpp.io.XDMFFile.Encoding = <Encoding.HDF5: 0>) -> None
    9. (self: dolfin.cpp.io.XDMFFile, mvc: dolfin.cpp.mesh.MeshValueCollection_sizet, encoding: dolfin.cpp.io.XDMFFile.Encoding = <Encoding.HDF5: 0>) -> None
    10. (self: dolfin.cpp.io.XDMFFile, mvc: dolfin.cpp.mesh.MeshValueCollection_int, encoding: dolfin.cpp.io.XDMFFile.Encoding = <Encoding.HDF5: 0>) -> None
    11. (self: dolfin.cpp.io.XDMFFile, mvc: dolfin.cpp.mesh.MeshValueCollection_double, encoding: dolfin.cpp.io.XDMFFile.Encoding = <Encoding.HDF5: 0>) -> None
    12. (self: dolfin.cpp.io.XDMFFile, points: list, encoding: dolfin.cpp.io.XDMFFile.Encoding = <Encoding.HDF5: 0>) -> None
    13. (self: dolfin.cpp.io.XDMFFile, points: list, values: List[float], encoding: dolfin.cpp.io.XDMFFile.Encoding = <Encoding.HDF5: 0>) -> None
    14. (self: dolfin.cpp.io.XDMFFile, u: object, encoding: dolfin.cpp.io.XDMFFile.Encoding = <Encoding.HDF5: 0>) -> None
    15. (self: dolfin.cpp.io.XDMFFile, u: object, t: float, encoding: dolfin.cpp.io.XDMFFile.Encoding = <Encoding.HDF5: 0>) -> None

Invoked with: <dolfin.cpp.io.XDMFFile object at 0x155535d9b8f0>, <module 'fenics_adjoint.types.mesh' from '/home/bastian/.conda/envs/mri_inverse/lib/python3.9/site-packages/fenics_adjoint/types/mesh.py'>, '/mesh'
srun: error: n017: tasks 0-3: Exited with exit code 1
